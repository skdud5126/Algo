# SWEA. 16504 Gravity

'''
가로 N 세로 100 크기의 방에 상자들이 쌓여있다. 방이 오른쪽으로 90도 회전하여 상자들이 중력의 영향을 받아 낙하한다고 할 때, 가장 큰 낙차를 구하여라

[제약 사항]
중력은 회전이 완료된 후 적용된다.
상자들은 모두 한쪽 벽면에 붙여진 상태로 쌓여 2차원의 형태를 이루며 벽에서 떨어져서 쌓인 상자는 없다.
방의 세로 길이는 항상 100이다. 즉, 상자는 최소 0, 최대 100 높이로 쌓을 수 있다

[입력]
첫 번째 줄에 테스트 케이스의 수 T가 주어진다.
각 테스트 케이스의 첫 줄에는 방의 가로길이가 주어지고 그 다음 줄부터는 쌓여있는 상자의 수가 주어진다.

[출력]
#부호와 함께 테스트 케이스의 번호를 출력하고, 공백 문자 후 테스트 케이스에 대한 답을 출력한다.

[그림설명]
총 26개의 상자가 회전 후, 오른쪽 방 그림의 상태가 된다. A 상자의 낙차가 7로 가장크므로 7을리턴하면 된다.
회전 결과, B상자의 낙차는6, C상자의 낙차는 1이다.

'''


T = int(input())

for case in range(1, T+1):
    N = int(input())
    arr = list(map(int, input().split()))   # 상자 입력 받음
    max_nak = 0    # 최대 낙차 값 초기 설정

    for idx in range(len(arr)):   #   배열 인덱스 가져옴
        for i in range(arr[idx],0, -1):    # 각 상자의 처음부터 앞의 상자들 순회돌면서 같거나 높은 박스들을 카운트하여 인덱스 끝에서 해당 인덱스 사용하여 -
            count = 0
            for num in arr:
                if i <= num:
                    count+=1
            nak = N-idx - count
            if max_nak < nak:   # 낙차 최대값 갱신
                max_nak = nak
    print(f'#{case} {max_nak}')