# SWEA. 22654[차윤이의 RC카]

'''
6살 차윤이는 생일선물로 RC카를 선물받았다.

아직 조종이 익숙하지 않은 차윤이는 공원에서 조종 연습을 하려고 한다.

아래는 차윤이가 조종을 연습할 N x N 필드의 정보이다.

GGGGG
GXGTG
GGTTG
GGGYG
GTGGG

'G' : RC카가 이동 가능한 땅
'T' : RC카가 이동이 불가능한 나무

'X' : 현재 RC카의 위치
'Y' : RC카를 이동 시키고자 하는 위치

RC카의 조종기로는 아래의 동작들을 할 수 있다.
'A' : 앞으로 이동 - 나무가 있는 곳이나 필드를 벗어나는 경우에는 아무 일도 일어나지 않는다.

      (RC카가 망가지는것을 방지하고자 장애물 판단 시스템이 탑재되었다.)
'L' : 현재 바라보고 있는 방향에서 왼쪽으로 90도 회전
'R' : 현재 바라보고 있는 방향에서 오른쪽으로 90도 회전

차윤이는 RC카를 항상 위를 바라보는 방향으로 부터 조종을 시작한다.
차윤이가 RC카를 조종한 커맨드가 주어졌을 때,  목적지에 도달 할 수 있는지 구하라.
(커맨드가 종료되었을 때, 목적지에 위치 해 있어야 한다.)

[입력 ]

첫번째 줄에는 테스트 케이스의 개수 T가 주어진다. (1 <= T <= 10)
각 테스트 케이스의 첫번째 줄에 필드의 크기 N이 주어진다. (2 <= N <= 5)
두번째 줄부터 N개의 줄에 걸쳐 필드의 정보가 공백 없이 주어진다.
필드의 정보는 본문의 설명을 참고하라.
다음 줄에는 조종을 한 횟수 Q가 주어진다. (1 <= Q <= 5)
다음 Q개의 줄에는 커맨드의 길이 C와 커맨드가 공백으로 구분되어 주어진다. (1 <= C <= 50)

[출력]

T개의 줄에 걸쳐 각 테스트 케이스에 대한 정답을 출력한다.
각 줄은 "#t"로 시작하고 (t는 1부터 시작하는 테스트 케이스의 번호를 의미한다.) 공백을 하나 둔 후, 정답을 출력한다.
각 테스트케이스의 커맨드마다 목적지에 도달 할 수 있다면 1, 아니면 0을 공백으로 구분하여 출력한다.
목적지에 이동 가능 여부가 아닌, 커맨드를 전부 실행 후 목적지에 도달했는지를 확인해야 함에 유의하라.

'''
import sys
sys.stdin = open('input.txt','r')

def search(x,y,command_list):
    current_x, current_y = x, y # 현재 x,y 좌표
    command_len, command = command_list

    dxy = [[-1,0],[0,1],[1,0],[0,-1]] # 상,우,하,좌
    dir = 0  # 방향 위치 잡아줄 변수
    for i in range(command_len):
        if command[i] == 'A':
            nx, ny = current_x + dxy[dir][0], current_y+dxy[dir][1]

            if 0<=nx<N and 0<=ny<N and filed_map[nx][ny] != 'T': # 범위 벗어나지않고 나무아닌 곳 좌표 이동 가능
                current_x, current_y = nx, ny  # 이동후 좌표 재할당
        else:
            if command[i] == 'R':  # R인 경우 오른쪽으로 방향 전환 위함
                dir += 1
            elif command[i] == 'L':  # L인 경우 왼쪽으로 방향 전환 위함
                dir -= 1

            if dir >= 4:  # 4넘어갔을 경우 0으로 초기화
                dir = 0
            elif dir <= -1:  # -1 넘어갔을 경우 3으로 초기화
                dir = 3

    if filed_map[current_x][current_y] == 'Y':  # 순회했을때 최종 위치 좌표가 Y이면 가능한 루트
        return 1
    else:
        return 0


T = int(input())

for case in range(1,(T+1)):
    N = int(input())  # 필드의 크기
    filed_map = [list(input()) for _ in range(N)]
    Q = int(input())

    command_list = [list(map(lambda x:int(x) if x.isdecimal() else x, input().split())) for _ in range(Q)]

    res = [0] * Q

    for i in range(N):
        for j in range(N):
            if filed_map[i][j] != 'X': continue
            if filed_map[i][j] == 'X':
                x,y = i,j

    for q in range(Q):
        res[q] = search(x,y,command_list[q])

    print(f'#{case}',*res)